layerName/*
 *  GeoBatch - Open Source geospatial batch processing system
 *  http://code.google.com/p/geobatch/
 *  Copyright (C) 2007-2012 GeoSolutions S.A.S.
 *  http://www.geo-solutions.it
 *
 *  GPLv3 + Classpath exception
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package it.geosolutions.geobatch.lamma.meteosat.test;

import it.geosolutions.filesystemmonitor.monitor.FileSystemEvent;
import it.geosolutions.filesystemmonitor.monitor.FileSystemEventType;
import it.geosolutions.geobatch.action.scripting.ScriptingAction;
import it.geosolutions.geobatch.action.scripting.ScriptingConfiguration;
import it.geosolutions.geobatch.flow.event.ProgressListenerForwarder;
import it.geosolutions.geobatch.flow.event.action.Action;
import it.geosolutions.geobatch.flow.event.action.ActionException;
import it.geosolutions.geobatch.geotiff.retile.GeotiffRetiler;
import it.geosolutions.geobatch.imagemosaic.ImageMosaicCommand;
import it.geosolutions.geobatch.lamma.meteosat.GeoNetworkUtils;
import it.geosolutions.geobatch.lamma.geostore.GeoStoreUtils;
import it.geosolutions.geobatch.lamma.meteosat.MeteosatUtils;
import it.geosolutions.geobatch.lamma.meteosat.RGBPythonUtils;
import it.geosolutions.geonetwork.GNClient;
import it.geosolutions.geostore.services.rest.GeoStoreClient;
import it.geosolutions.tools.compress.file.Extract;
import it.geosolutions.tools.freemarker.filter.FreeMarkerFilter;
import it.geosolutions.tools.io.file.Collector;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.WildcardFileFilter;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;



    

    /**
     * Script Main "execute" function
     **/
public Map execute(Map argsMap) throws Exception {
  
  /**
     * this is the list (a comma separated string) of prefixes present into the
     * map. Each prefix represents a different mosaic for the Meteosat flow. Its
     * settings should be set into the map as:<br>
     * {prefix}{_setting}<br>
     * where setting is one of the following:
     * <ul>
     * <li>_FILTER</li>
     * <li>_SCRIPT</li>
     * <li>_CALC</li>
     * <li>_MOSAIC_DIR</li>
     * <li>_STYLE</li>
     * </ul>
     */
    String PREFIX_LIST = "PREFIX_LIST";
    /**
     * The suffix to add to the prefix to obtain the filter KEY into the map
     * this filter will be used to collect (in the filter order) the files to
     * pass to the script
     */
    String FILTER = "_FILTER";
    /**
     * The suffix to add to the prefix to obtain the script KEY into the map
     * this is the script called for this prefix variable
     */
    String SCRIPT = "_SCRIPT";
    /**
     * The suffix to add to the prefix to obtain the CALC function KEY into the
     * map this is the function called into the calc.py file for this prefix
     * variable
     */
    String CALC_FUNCTION = "_CALC";
    /**
     * The suffix to add to the prefix to obtain the MOSAIC_DIR KEY into the map
     * this is the directory to use as mosaic base dir (the directory containing
     * the mosaic)
     */
    String MOSAIC_DIR = "_MOSAIC_DIR";
    /**
     * the style to apply into the mosaic
     */
    String STYLE = "_STYLE";
    /**
     * the default workspace
     */
    String DEF_WORKSPACE = "WORKSPACE";
    /**
     * the key to get the relative path (to the configDir) to load environment
     * to call python
     */
    String ENVIRONMENT_FILE = "ENV_FILE";
    /**
     * the key to get the GeoServer Url
     */
    String GSURL = "GSURL";
    /**
     * the key to get the GeoServer user id
     */
    String GSUID = "GSUID";
    /**
     * the key to get the GeoServer pass
     */
    String GSPWD = "GSPWD";

    /**
     * the key to get the GeoStore Url
     */
    String GSTURL = "GSTURL";
    /**
     * the key to get the GeoStore user id
     */
    String GSTUID = "GSTUID";
    /**
     * the key to get the GeoStore pass
     */
    String GSTPWD = "GSTPWD";
    /**
     * GeoStore the key matching the path (relative to the configDir where the
     * GST metadata template is located
     */
    String GST_METADATA_TEMPLATE = "GST_METADATA_TEMPLATE";
    /**
      * GeoStore the key matching the path (relative to the configDir where
      * the GST metadata layer template is located this template must define only a layer
      */
    final String GST_LAYER_TEMPLATE = "GST_LAYER_TEMPLATE";
    /**
     * the key to get the GeoServer Url
     */
    String GNURL = "GNURL";
    /**
     * the key to get the GeoServer user id
     */
    String GNUID = "GNUID";
    /**
     * the key to get the GeoServer pass
     */
    String GNPWD = "GNPWD";
    /**
     * GeoNetwork category (dataset)
     */
    String GNCAT = "GNCAT";
    /**
     * GeoNetwork group (1)
     */
    String GNGRP = "GNGRP";
    /**
     * GeoNetwork styleSheet (_none_)
     */
    String GNSTYLE = "GNSTYLE";
    /**
     * GeoNetwork the key matching the path (relative to the configDir where the
     * GN metadata template is located
     */
    String GN_METADATA_TEMPLATE = "GN_METADATA_TEMPLATE";

        final ScriptingConfiguration configuration = (ScriptingConfiguration)argsMap
            .get(ScriptingAction.CONFIG_KEY);

        boolean failIgnore = true;
        // TODO
        if (!configuration.isFailIgnored()){
	    failIgnore=false;
        }
	
	final Map map=configuration.getProperties();
	
        final File tempDir = (File)argsMap.get(ScriptingAction.TEMPDIR_KEY);
        final File configDir = (File)argsMap.get(ScriptingAction.CONFIGDIR_KEY);
        final ProgressListenerForwarder listenerForwarder = (ProgressListenerForwarder)argsMap
            .get(ScriptingAction.LISTENER_KEY);
        final List events = (List)argsMap.get(ScriptingAction.EVENTS_KEY);
        if (events.size() != 1) {
            ActionException ae = new ActionException(Action.class,
                                                     "More than 1 argument encountered. We only need a zip file");
            listenerForwarder.failed(ae);
        }

        // set workspace
        String workspace = (String)map.get(DEF_WORKSPACE);
        if (workspace == null) {
            throw new ActionException(Action.class, "Unable to continue without a " + DEF_WORKSPACE+ " defined, please check your configuration");
        }

        FileSystemEvent ev = (FileSystemEvent)events.remove(0);
        // extract input
        String channelsDirName = Extract.extract(ev.getSource().getAbsolutePath(), true);
        File channelsDir = new File(channelsDirName);

        final Logger logger = LoggerFactory
            .getLogger("it.geosolutions.geobatch.action.scripting.ScriptingAction.class");

        // read env
        final String envFileName = (String)map.get(ENVIRONMENT_FILE);
        if (envFileName == null)
            throw new IllegalArgumentException("The key " + ENVIRONMENT_FILE+ " property is not set, please fix the configuration.");

        // used for geostore
        final List<Map> rootList = new ArrayList<Map>();

        // read prefix list
        final String prefixList = (String)map.get(PREFIX_LIST);
        if (prefixList == null)
            throw new IllegalArgumentException("The key " + PREFIX_LIST+ " property is not set, please fix the configuration.");
        final String[] prefixes = prefixList.split(",");
        for (String prefix : prefixes) {

            if (logger.isDebugEnabled()) {
                logger.debug("Doing stuff for prefix: " + prefix);
            }

            final String mosaicDirName = (String)map.get(prefix + MOSAIC_DIR);
            if (mosaicDirName == null) {
                if (failIgnore) {
                    logger.error("The key " + prefix + MOSAIC_DIR+ " property is not set, please fix the configuration.");
                    continue;
                } else {
                    throw new IllegalArgumentException("The key "+ prefix+ MOSAIC_DIR+ " property is not set, please fix the configuration.");
                }
            }
            final File mosaicDir = new File(mosaicDirName);

            // TODO NOTE here tempDir is the directory where to find channels
            // NOT the action getTempDir()
            // ------------------------------------------------
            final Collector c = new Collector(new WildcardFileFilter("MSG*_*.tif"));
            final File[] fileList = c.collect(channelsDir).toArray([new File("")]);// channelsDir.list(new
                                                                                  // WildcardFileFilter("MSG*_*.tif"));
            if (fileList.length == 0) {
                final IllegalArgumentException iae = new IllegalArgumentException("The passed folder "+channelsDir+" does not contain channel files in the correct form.");
                listenerForwarder.failed(iae);
                throw iae;
            }
            final String modelName = fileList[0].getName();
            final String time = MeteosatUtils.getTime(modelName);
            final File outFile = new File(channelsDir, prefix + "_" + time + ".tif");
            // GeoStore
            final File[] channels;
            try {
                // use workspace as GeoStore Category and resource
                channels = RGBPythonUtils.getChannels(channelsDir, prefix, map);
            } catch (Exception e) {
                if (failIgnore) {
                    if (logger != null && logger.isErrorEnabled()) {
                        logger.error(e.getLocalizedMessage(), e);
                    }
                    continue;
                } else {
                    throw new ActionException(Action.class, e.getLocalizedMessage(), e.getCause());
                }
            }
            
            if (channels.length > 1) { // call python channels to RGB process
                final String[] args = RGBPythonUtils.buildArgs(configDir, channels, outFile, prefix, map);
                final File props = new File(configDir, envFileName);
                boolean ret = RGBPythonUtils.run(logger, props, null, args);

                // if !success continue or break
                if (!ret) {
                    final String message = "Unable to get output from the python script process for prefix: "+ prefix;
                    if (failIgnore) {
                        logger.warn(message);
                        continue;
                    } else {
                        // listenerForwarder.failed();
                        logger.error(message);
                        break;
                    }
                }
            } else { // simply rename the tiff to publish it
//                File inFile, File tiledTiffFile, double compressionRatio, String compressionType, int tileW, int tileH, boolean forceBigTiff) throws IOException {
               GeotiffRetiler.reTile(channels[0], outFile, 0.7, "LZW", 256, 256, false);

               // add-overview
               MeteosatUtils.addo(outFile, map);
            }

            // building IMC to add new granule updating mosaic
            final List<File> addFileList = new ArrayList<File>();
            addFileList.add(outFile);
            final ImageMosaicCommand imc = new ImageMosaicCommand(mosaicDir, addFileList, null);

            // TODO set specific settings for this mosaic (style, bb, etc...)

            final String gsUrl = (String)map.get(GSURL);
            // config.put(GSURL, gsUrl);
            if (gsUrl == null) {
                // TODO
            }
            // config.put(GSURL, gsUrl);

            final String gsUsr = (String)map.get(GSUID);
            if (gsUsr == null) {
                // TODO
            }
            // config.put(GSUID, gsUsr);

            final String gsPwd = (String)map.get(GSPWD);
            if (gsPwd == null) {
                // TODO
            }
            // config.put(GSPWD, gsPwd);

            imc.setGeoserverPWD(gsPwd);
            imc.setGeoserverUID(gsUsr);
            imc.setGeoserverURL(gsUrl);

            // set style
            final String style = (String)map.get(prefix + STYLE);
            imc.setDefaultStyle(style != null ? style : "raster");
            imc.setDefaultNamespace(workspace != null ? workspace : "geosolutions");

            imc.setCrs("EPSG:4326");
            imc.setTimeDimEnabled("true");
            imc.setTimeRegex("[0-9]{8}T[0-9]{4}Z(\\?!.\\*[0-9]{8}T[0-9]{4}Z.\\*)");

            //final File datastore = new File(configDir,"commons/datastore.properties");
            imc.setDatastorePropertiesPath("commons/datastore.properties");

            final Queue<EventObject> queue = MeteosatUtils.callImageMosaicAction(logger, channelsDir,
                                                                                 configDir, imc);
            // if !success continue or break
            if (queue == null || queue.isEmpty()) {
                if (failIgnore) {
                    logger.error("Unable to get output from the ImageMosaicAction for layer " + workspace + ":" + prefix);
                    continue;
                } else {
                    throw new ActionException(Action.class,
                                              "Unable to get output from the ImageMosaicAction for layer "+ workspace + ":" + prefix);
                }
            }

            FileSystemEvent event = (FileSystemEvent)queue.remove();
            File imageMosaicOutput = event.getSource();

            // GEONETWORK
            // ////////////////////////////////////////////////////////////////

            final String gnTemplateName = (String)map.get(GN_METADATA_TEMPLATE);
            if (gnTemplateName == null)
                throw new IllegalArgumentException("The key " + GN_METADATA_TEMPLATE+ " property is not set, please fix the configuration.");
            final FreeMarkerFilter gnFilter = new FreeMarkerFilter(new File(configDir, gnTemplateName));

            String gnUrl = (String)map.get(GNURL);
            if (gnUrl == null) {
                gnUrl = "http://localhost:8282/geonetwork";
            }
            String gnUsr = (String)map.get(GNUID);
            if (gnUsr == null) {
                gnUsr = "admin";
            }
            String gnPwd = (String)map.get(GNPWD);
            if (gnPwd == null) {
                gnPwd = "admin";
            }
            final GNClient geonetwork = GeoNetworkUtils.createClientAndLogin(gnUrl, gnUsr, gnPwd);

            String gnCat = (String)map.get(GNCAT);
            String gnGroup = (String)map.get(GNGRP);
            String gnStyleSheet = (String)map.get(GNSTYLE);

            try {
		// publish on geonetwork returning the ImageMosaic Map enriched with the GN_UUID
                Map root = GeoNetworkUtils.publishOnGeoNetwork(tempDir, imageMosaicOutput, gnFilter,
                                               geonetwork, gnCat, gnGroup, gnStyleSheet, failIgnore, logger);
		rootList.add(root);
            } catch (ActionException e) {
                if (failIgnore) {
                    logger.error(e.getLocalizedMessage(), e);
                    continue;
                } else {
                    listenerForwarder.failed(e);
                    throw e;
                }
            }

        } // for each prefix in configuration

        // GEOSTORE
        // ////////////////////////////////////////////////////////////////

        final String gstTemplateName = (String)map.get(GST_METADATA_TEMPLATE);
        if (gstTemplateName == null)
            throw new IllegalArgumentException("The key " + GST_METADATA_TEMPLATE+ " property is not set, please fix the configuration.");
        final FreeMarkerFilter gstFilter = new FreeMarkerFilter(new File(configDir, gstTemplateName));
	
	final String gstLayerTemplateName = (String)map.get(GST_LAYER_TEMPLATE);
        if (gstLayerTemplateName == null)
            throw new IllegalArgumentException("The key " + GST_LAYER_TEMPLATE + " property is not set, please fix the configuration.");
        final FreeMarkerFilter gstLayerFilter = new FreeMarkerFilter(new File(configDir, gstLayerTemplateName));
        
	String gstUrl = (String)map.get(GSTURL);
        if (gstUrl == null) {
            gstUrl = "http://localhost:8383/geostore/rest/";
        }
        String gstUsr = (String)map.get(GSTUID);
        if (gstUsr == null) {
            gstUsr = "admin";
        }
        String gstPwd = (String)map.get(GSTPWD);
        if (gstPwd == null) {
            gstPwd = "admin";
        }
        // init geostore parameter connection
        final GeoStoreClient geostore = new GeoStoreClient();
        geostore.setGeostoreRestUrl(gstUrl);
        geostore.setUsername(gstUsr);
        geostore.setPassword(gstPwd);

        // GeoStore
        try {
            // use workspace as GeoStore Category and resource
            GeoStoreUtils.publishOnGeoStore(logger, gstFilter, gstLayerFilter, geostore, rootList, workspace);
        } catch (Exception e) {
            if (failIgnore) {
                if (logger != null && logger.isErrorEnabled()) {
                    logger.error(e.getLocalizedMessage(), e);
                }
            } else {
		ActionException ae=new ActionException(Action.class, e.getLocalizedMessage(), e.getCause());
		listenerForwarder.failed(ae);
                throw ae;
            }
        }

        listenerForwarder.completed();
        return argsMap;
    }